/*
 * Wazuh report dispatcher mock
 * Copyright (C) 2015, Wazuh Inc.
 * December 3, 2024.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */
#ifndef _MOCK_SCAN_CONTEXT_HPP
#define _MOCK_SCAN_CONTEXT_HPP

#include "scanContext.hpp"
#include "gmock/gmock.h"
#include "gtest/gtest.h"

/**
 * @class MockScanContext
 *
 * @brief Mock implementation of the ScanContext interface for unit testing.
 *
 * This class uses Google Mock to simulate the behavior of a ScanContext.
 * It provides mock methods for all required virtual functions used in
 * TScanInventorySync and related logic. Public members are exposed directly
 * for manipulation in test cases.
 */
class MockScanContext
{
public:
    /**
     * @brief Default constructor.
     *
     * Initializes the mock scan context. No real initialization is performed.
     */
    MockScanContext() = default;

    /**
     * @brief Virtual destructor.
     *
     * Allows proper cleanup of derived mock types, if any.
     */
    virtual ~MockScanContext() = default;

    /**
     * @brief Gets the agent ID.
     * @return The mocked agent ID.
     */
    MOCK_METHOD(std::string, agentId, (), (const));

    /**
     * @brief Indicates whether the agent is part of a cluster.
     * @return True if cluster agent, false otherwise.
     */
    MOCK_METHOD(bool, clusterStatus, (), (const));

    /**
     * @brief Gets the cluster node name.
     * @return The mocked cluster node name.
     */
    MOCK_METHOD(std::string, clusterNodeName, (), (const));

    /**
     * @brief Gets the affected component type (OS, Package, etc.).
     * @return A mocked AffectedComponentType enum.
     */
    MOCK_METHOD(AffectedComponentType, affectedComponentType, (), (const));

    /**
     * @brief Gets the OS name (e.g., "Ubuntu").
     * @return The mocked OS name.
     */
    MOCK_METHOD(std::string, osName, (), (const));

    /**
     * @brief Gets the OS version (e.g., "22.04").
     * @return The mocked OS version.
     */
    MOCK_METHOD(std::string, osVersion, (), (const));

    /**
     * @brief Gets the package item ID (used for Package scans).
     * @return The mocked package item ID.
     */
    MOCK_METHOD(std::string, packageItemId, (), (const));

    /**
     * @brief Gets the hotfix ID (used for Hotfix scans).
     * @return The mocked hotfix ID.
     */
    MOCK_METHOD(std::string, hotfixId, (), (const));

    /**
     * @brief Elements to process in the scan.
     *
     * Represents CVEs and their corresponding metadata.
     * Used directly by TScanInventorySync to determine insertions and deletions.
     */
    std::unordered_map<std::string, nlohmann::json> m_elements;

    /**
     * @brief Flag indicating if this context should avoid indexing.
     */
    bool m_noIndex = false;

    /**
     * @brief Flag indicating if this is the first scan for the agent.
     */
    bool m_isFirstScan = true;

    /**
     * @brief Optional agent metadata associated with the scan.
     */
    std::vector<AgentData> m_agents;
};

#endif // _MOCK_SCAN_CONTEXT_HPP
